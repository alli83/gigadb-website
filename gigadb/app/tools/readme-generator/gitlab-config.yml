
ReadmeGeneratorTest:
  variables:
    LOCAL_COMPOSE: "docker-compose -f ./docker-compose.yml"
    REPO_NAME: $CI_PROJECT_NAME
#    GIGADB_HOST: "172.17.0.1"
#    GIGADB_PASSWORD: ""
    GIGADB_ENV: dev
    PROJECT_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fforks%2F$REPO_NAME/variables"
    MISC_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fcnhk-infra/variables"
    GROUP_VARIABLES_URL: "https://gitlab.com/api/v4/groups/gigascience/variables?per_page=100"
    FORK_VARIABLES_URL: "https://gitlab.com/api/v4/groups/3501869/variables" 
    GIGADB_COMPOSE_PROJECT_NAME: $CI_PROJECT_NAME
#    FOO: "bar"
  stage: test
  artifacts:
    paths:
      - .env
      - .secrets
      - gigadb/app/tools/readme-generator/runtime/logs/app.log
      - gigadb/app/tools/readme-generator/tests/_output
      - gigadb/app/tools/readme-generator/config/params.php
      - gigadb/app/tools/readme-generator/composer.json
      - gigadb/app/tools/readme-generator/composer.lock
      - gigadb/app/tools/readme-generator/tests/functional.suite.yml
      - gigadb/app/tools/readme-generator/tests/unit.suite.yml
      - gigadb/app/tools/readme-generator/.env
      - gigadb/app/tools/readme-generator/.secrets
      - gigadb/app/tools/readme-generator/.project_var
      - gigadb/app/tools/readme-generator/.project_var_raw1
      - gigadb/app/tools/readme-generator/.project_var_raw2
      - gigadb/app/tools/readme-generator/.project_vars.json
    when: always
    expire_in: 1 week
  script:
    # Need GigaDB images to provide database
    - env | grep "^HOME_URL" >> $APPLICATION/.env
    - env | grep "^GIGADB_" >> $APPLICATION/.secrets
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/console:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/web:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/tusd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/ftpd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/watcher:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/tusd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/beanstalkd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/js:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest || true
    - env
    - pwd
    - ./up.sh
    - echo $APPLICATION
    - pwd
    - env | grep -iE "(GIGADB_ENV|PROJECT_VARIABLES_URL|MISC_VARIABLES_URL|GITLAB_PRIVATE_TOKEN|CI_PROJECT_URL|GROUP_VARIABLES_URL|FORK_VARIABLES_URL|GIGADB_COMPOSE_PROJECT_NAME)"| tee gigadb/app/tools/readme-generator/.env
    - cd gigadb/app/tools/readme-generator
    - $LOCAL_COMPOSE run --rm config
    - $LOCAL_COMPOSE run --rm tool composer install
    - $LOCAL_COMPOSE run --rm tool ./vendor/bin/codecept build
    - sleep 5
    - $LOCAL_COMPOSE ps
    - $LOCAL_COMPOSE run --rm tool ./vendor/bin/codecept run tests/unit
    - $LOCAL_COMPOSE run --rm tool ./vendor/bin/codecept run tests/functional
  needs: ["container_scanning","phpcs-security-audit-sast"]
  environment:
    name: dev

ReadmeGeneratorBuildStaging:
  stage: staging build
  variables:
    LOCAL_COMPOSE: "docker-compose -f ./docker-compose.production.yml"
    REPO_NAME: $CI_PROJECT_NAME
    GIGADB_ENV: staging
    PROJECT_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fforks%2F$REPO_NAME/variables"
    MISC_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fcnhk-infra/variables"
    GROUP_VARIABLES_URL: "https://gitlab.com/api/v4/groups/gigascience/variables?per_page=100"
    FORK_VARIABLES_URL: "https://gitlab.com/api/v4/groups/3501869/variables"
  script:
    - env | grep -iE "(GIGADB_ENV|PROJECT_VARIABLES_URL|MISC_VARIABLES_URL|GITLAB_PRIVATE_TOKEN|CI_PROJECT_URL|GROUP_VARIABLES_URL|FORK_VARIABLES_URL)"| tee gigadb/app/tools/readme-generator/.env
    - cd gigadb/app/tools/readme-generator
    - $LOCAL_COMPOSE run --rm config  #run generate_config to create configuration file with variables from staging
    - docker-compose -f docker-compose.yml run --rm tool composer install  # install composer dependencies
    - $LOCAL_COMPOSE build production_tool  # build production container from the production docker file
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com  # log in to Gitlab so we can push the container image there
    - docker tag ${CI_PROJECT_NAME}_production_tool:latest registry.gitlab.com/$CI_PROJECT_PATH/production_tool:$GIGADB_ENV
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_tool:$GIGADB_ENV
  dependencies: []
  environment:
    name: staging
  artifacts:
    paths:
      - gigadb/app/tools/readme-generator/.env
      - gigadb/app/tools/readme-generator/.secrets
      - gigadb/app/tools/readme-generator/config
      - .env
      - .secrets
    when: always
    expire_in: 3 days
  needs: ["ReadmeGeneratorTest"]

ReadmeGeneratorDeployStaging:
  stage: staging deploy
  variables:
    GIGADB_ENV: staging
    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
    REMOTE_BASTION_DOCKER: "$remote_bastion_public_ip:2376"
  script:
    # Deployment to bastion server
    - mkdir -pv ~/.docker
    - bash -c "echo '$docker_bastion_tlsauth_ca' >  ~/.docker/ca.pem"
    - bash -c "echo '$docker_bastion_tlsauth_cert' > ~/.docker/cert.pem"
    - bash -c "echo '$docker_bastion_tlsauth_key' > ~/.docker/key.pem"
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER info
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_tool:$GIGADB_ENV
  environment:
    name: $GIGADB_ENV
  dependencies: []
  needs: [ "ReadmeGeneratorBuildStaging" ]

#FilesUrlsUpdaterBuildLive:
#  stage: live build
#  variables:
#    LOCAL_COMPOSE: "docker-compose -f ./docker-compose.production.yml"
#    REPO_NAME: $CI_PROJECT_NAME
#    GIGADB_ENV: live
#    PROJECT_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fforks%2F$REPO_NAME/variables"
#    MISC_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fcnhk-infra/variables"
#  script:
#    - env | grep -iE "(GIGADB_ENV|PROJECT_VARIABLES_URL|MISC_VARIABLES_URL|GITLAB_PRIVATE_TOKEN|CI_PROJECT_URL)"| tee gigadb/app/tools/files-url-updater/.env
#    - cd gigadb/app/tools/files-url-updater
#    - $LOCAL_COMPOSE run --rm config #run generate_config to create configuration file with variables from staging
#    - docker-compose -f docker-compose.yml run --rm updater composer install # install composer dependencies
#    - $LOCAL_COMPOSE build production_updater # build production container from the production docker file
#    - $LOCAL_COMPOSE build production_s3backup # build the container for production s3 backup
#    - $LOCAL_COMPOSE build production_pg9_3 # build the container for production version of legacy database server
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com # log in to Gitlab so we can push the container image there
#    - docker tag ${CI_PROJECT_NAME}_production_updater:latest registry.gitlab.com/$CI_PROJECT_PATH/production_updater:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_updater:$GIGADB_ENV
#    - docker tag ${CI_PROJECT_NAME}_production_s3backup:latest registry.gitlab.com/$CI_PROJECT_PATH/production_s3backup:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_s3backup:$GIGADB_ENV
#    - docker tag ${CI_PROJECT_NAME}_production_pg9_3:latest registry.gitlab.com/$CI_PROJECT_PATH/production_pg9_3:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_pg9_3:$GIGADB_ENV
#  dependencies: []
#  environment:
#    name: live
#  when: manual
#  artifacts:
#    paths:
#      - gigadb/app/tools/files-url-updater/.env
#      - gigadb/app/tools/files-url-updater/.secrets
#      - gigadb/app/tools/files-url-updater/config
#      - .env
#      - .secrets
#      - .ci_env
#    when: always
#    expire_in: 3 days
#  needs: ["FilesUrlsUpdaterDeployStaging"]
#
#FilesUrlsUpdaterDeployLive:
#  stage: live deploy
#  variables:
#    GIGADB_ENV: live
#    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
#    REMOTE_BASTION_DOCKER: "$remote_bastion_public_ip:2376"
#  script:
#    # Deployment to bastion server
#    - mkdir -pv ~/.docker
#    - bash -c "echo '$docker_bastion_tlsauth_ca' >  ~/.docker/ca.pem"
#    - bash -c "echo '$docker_bastion_tlsauth_cert' > ~/.docker/cert.pem"
#    - bash -c "echo '$docker_bastion_tlsauth_key' > ~/.docker/key.pem"
#    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER info
#    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
#    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_updater:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_s3backup:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_pg9_3:$GIGADB_ENV
#  environment:
#    name: $GIGADB_ENV
#  dependencies: []
#  needs: [ "FilesUrlsUpdaterBuildLive" ]